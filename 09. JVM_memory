# 자바 메모리

### 1. 메모리 누수 분석
##### 1. OutOfMemoryError란 
 1. 발생원인 : OnOutOfMemoryError 메모리 누수(Memory Leak) 상황이 발생했을 떄, 일어난다. 자바는 개체를 힙(Heap)공간에 생성하고 이 생성위치에 댛나 주소를 가지고 개체 참조 하는 방식으로 사용한다.
 개체를 생성하는 과정에서 힙 공간에 개체를 할당하기 위한 공간이 부족한 경우 발생한다. 이 경우 가비지 콜렉터를 수행하는데 과도한 시간이 소비되며 메모리를 사용하지 못하는 경우에서도 발생할 수 있다. 기본 할당조건을 충족하지 못하는 경우 네이티브 라이브러리 코드에 의해 발생할 수 있다.(ex. not enough swap-space)
 
 2. outOfMemoryError 예외 종류 및 원인
   - java.lang.OutOfMemoryError: Java heap space(Java 힙 공간)
   	* 원인: 자바 힙 공간에 새로운 개체를 생성할 수 없는 경우 발생한다. 이 오류가 반드시 메모리 누수를 의미하는 것은 아니다. 지정한 힙 크기(혹은 기본 크기)가 애플리케이션에 충분하지 않은 경우 발생한다. 다른 경우, 생명주기가 긴 애플리케이션의 경우 혹은 finalize를 과도하게 사용하는 애플리케이션에서 발생하기도 한다. 클래스에 finalize 메서드가 있는 경우 해당 개체에 대한 가비지컬렉션 시간에 공간을 확보하지 못한다. finalizer가 finalizer 큐에 담긴 finalizer 큐를 처리하는 속도보다 빠른 속도로 쌓이면서 힙 공간이 가득차면서 발생할 수 있다.
	* 조치: finalization 보류 상태의 객체를 모니터링하는 방법을 고려한다.
	
	- java.lang.OutOfMemoryError: GC Overhead limit exceeded(GC 오버해드 한도 초과)
	* 원인: 가비지 컬렉터 실행과정에서 자바 프로그램이 느려지는 경우 발생한다. 가바지 수집 후, 자바 프로세스가 자바 컬렉션을 수행하는데 걸리는 시간의 약 98% 이상을 소비하고 힙의 2% 미만이 복구된 상태에서 지금까지 수행하는 과정에서 가비지 컬렉션 중 java.lang.OutOfMemoryError가 5번 이상 생성되는 경우 발생한다. 이 예외는 일반적으로 데이터를 할당하는 데 필요한 공간이 힙에 없는 경우 발생한다.
	* 조치 :	힙 크기를 늘린다.
			-XX:-UseGCOverheadLimit 선택사항을 추가하여 java.lang.OutOfMemoryError 가 발생하는 초과 오버헤드 GC 제한 명령을 해제할 수 있다.
	
	- java.lang.OutOfMemoryError: Requested array size exceeds VM limit(요청 배열 크기가 VM 제한을 초과합니다.)
	* 원인: 애플리케이션(혹은 애플리케이션이 사용하는 API)이 힙 공간보다 큰 배열을 할당을 시도하는 경우 발생한다. 예를 들어, 애플리케이션이 512MB 크기의 배열을 할당하려하지만 힙의 최대크기가 256MB인 경우 요청배열크기가 VM 제한을 초과하면서 java.lang.OutOfMemoryError를 던진다.
		1. 힙 공간 사이즈가 너무 작은 경우
		2. 배열 요소를 계산하고 더하는 등 배열을 키우는 경우
	
	- java.lang.OutOfMemoryError: Metaspace
	* 원인: 자바 클래스 메타데이터(자바 클래스에 대한 VM 내부표현)는 원시 메모리(== 메타공간)에 할당된다. 클래스 메타데이터가 할당될 메타공간이 모두 소모되면() java.lang.OutOfMemoryError: Metaspace가 발생한다. 클래스 메타데이터가 할당될 공간은 MaxMetaSpaceSize 매개변수로 제한된다.
	* 조치: MaxMetaSpaceSize 값을 늘려 설정한다. MaxMetaSpaceSize는 자바 힙과 동일한 주소 공간에 할당된다. 자바 힙의 크기를 줄이면 더 많은 공간을 확보할 수 있다. 자바 힙 공간에 여유가 있는 경우에 고려해볼 수 있다.
	
	- java.lang.OutOfMemoryError: request size bytes for reason. Out of swap space?
	* 원인: 자바 HotSpot VM 코드가 네이티브 힙이 고갈되어 네이티브 힙에 할당할 수 없는 경우 발생한다. 이 메시지는 실패한 요청의 (바이트) 크기와 메모리 요청의 이유를 나타낸다. 대개의 경우 할당에 실패한 소스 모듈의 이름을 출력한다.
	* 조치: 네이티브 힙 고갈의 경우는 힙 메모리 로그 및 메모리 맵 정보를 분석하는 것이 유용하다. 이런 유형은 운영체제의 문제 해결 유틸리티를 사용하여 문제를 진단할 수 있다.
		1. 치명적인 오류 로그 파일을 살펴보고자 한다면 Fatal error log를 참조하기 바란다.
		2. 운영체제 분석도구: Native Operation System tools
		
		
	- java.lang.OutOfMemoryError: Compressed class space(압축된 클래스 공간)
	* 원인: 64비트 플랫폼에서 클래스 메타데이터 포인터는 32비트 오프셋(UseCompressedOops)으로 표현된다. 이 방식은 UseCompressedClassPointers(기본값 활성화,on)으로 제어할 수 있으며 활성화되면 클래스 메타데이터가 사용할 수 있는 공간의 크기가 고정된다. UseCompressedClassPointers에 필요한 CompressedClassSpaceSize를 초과하면 java.lang.OutOfMemoryError: Compressed class space를 던진다.
	* 조치: CompressedClassSpaceSize 크기를 키우거나 UseCompressedClassPointers를 비활성화 시킨다.
	
	- java.lang.OutOfMemoryError: reason stack_trace_with_native_method
	* 원인: 이 메시지가 출력되는 것은 원시 메서드에서부터 스택 드레이스가 출력되었다는 것을 의미하며, 네이티브 메서드에 할당 오류가 발생했음을 의미한다. 이 메시지가 이전 메시지들과 다른 점은 JVM 코드가 아니라 Java Native Interface(JNI) 또는 원시메서드에서 할당실패가 감지되었다는 것이다.
	* 조치: 이 예외가 발생했다면 운영체제가 제공하는 유틸리티를 이용해서 문제점을 진단해야 한다.